
public class BinaryTreeQue {
    static class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    static class BinaryTree {
        static int idx = -1;

        public static Node buildTree(int nodes[]) {
            idx++;
            if (nodes[idx] == -1) {
                return null;
            }
            Node newNode = new Node(nodes[idx]);
            newNode.left = buildTree(nodes);
            newNode.right = buildTree(nodes);
            return newNode;
        }
    }

    // Q.1. Count of Nodes of Tree O(n)-->
    public static int countOfNodes(Node root) {
        if (root == null) {
            return 0;
        }
        int leftNodes = countOfNodes(root.left);
        int rightNodes = countOfNodes(root.right);
        return leftNodes + rightNodes + 1;

    }

    // Q.2. Sum of Nodes of Tree O(n) -->
    public static int sumOfNodes(Node root) {
        if (root == null) {
            return 0;
        }
        int leftSum = sumOfNodes(root.left);
        int rightSum = sumOfNodes(root.right);
        return leftSum + rightSum + root.data;
    }

    // Q.3 Height of Tree -->
    public static int height(Node root) {
        if (root == null) {
            return 0;
        }
        int leftHeight = height(root.left);
        int rightHeight = height(root.right);
        int myheight = Math.max(leftHeight, rightHeight) + 1;
        return myheight;
    }

    // Q.4 Diameter of Tree - Approach1 O(N^2) -->
    public static int diameter(Node root) {
        if (root == null) {
            return 0;
        }
        int diam1 = diameter(root.left);
        int diam2 = diameter(root.right);
        int diam3 = height(root.left) + height(root.right) + 1;
        return Math.max(diam3, Math.max(diam1, diam2));
    }

    // Q.5 Diameter of Tree - Approach2 O(N) -->

    static class TreeInfo {
        int ht;
        int diam;

        TreeInfo(int ht, int diam) {
            this.ht = ht;
            this.diam = diam;
        }
    }

    public static TreeInfo diameter2(Node root) {
        if (root == null) {
            return new TreeInfo(0, 0);
        }

        TreeInfo left = diameter2(root.left);
        TreeInfo right = diameter2(root.right);
        int myHeight = Math.max(left.ht, right.ht) + 1;

        int diam1 = left.diam;
        int diam2 = right.diam;
        int diam3 = left.ht + right.ht + 1;
        int myDiam = Math.max(diam1, Math.max(diam2, diam3));

        TreeInfo myInfo = new TreeInfo(myHeight, myDiam);
        return myInfo;

    }

    // Q.6. Subtree of another tree -->

    public static void main(String[] args) {
        int nodes[] = { 1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1 };
        BinaryTree tree = new BinaryTree();
        Node root = tree.buildTree(nodes);

        // System.out.println(root.data); // root 1

        // Q.1 Count of Nodes of Tree -->
        // System.out.println(countOfNodes(root)); // 6

        // Q.2. Sum of Nodes of Tree O(n) -->
        // System.out.println(sumOfNodes(root));

        // Q.3 Height of Tree -->
        // System.out.println(height(root)); // 3

        // Q.4 Diameter of Tree - Approach1 O(N^2) -->
        // System.out.println(diameter(root)); // 5

        // Q.5 Diameter of Tree - Approach2 O(N) -->
        // System.out.println(diameter2(root).diam);

       
        

    }
}
