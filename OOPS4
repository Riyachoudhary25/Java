// Abstraction -->
//  1. Abstract class-->

// abstract class Animal {
//     abstract void walk();

//     Animal() {
//         System.out.println("you are creating a new Animal");
//     }

//     public void eat() {
//         System.out.println("Animals eat");
//     }
// }

// class Horse extends Animal {
//     Horse() {
//         System.out.println("creating a fHorse");
//     }

//     public void walk() {
//         System.out.println("Walk on 4 legs");
//     }
// }

// class Chicken extends Animal {
//     public void walk() {
//         System.out.println("Walk on 2 legs");
//     }
// }

// 2. Interfaces -->
interface Animal {
    public void walk();
}

interface Herbivore {

}

class Horse implements Animal, Herbivore {
    public void walk() {
        System.out.println("walks on 4 leg");
    }
}

public class OOPS4 {
    public static void main(String[] args) {
        // 1. Abstract class-->
        // Horse horse = new Horse();
        // horse.walk();
        // horse.eat();
        // Animal a1 = new Animal() ;
        // a1.walk();

        // 2. Interfaces -->
        Horse horse = new Horse();
        horse.walk();

    }
}
