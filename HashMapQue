import java.util.*;

public class HashMapQue {

    // Question 1 ->
    public static void majorityElement(int nums[]) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (map.containsKey(nums[i])) { // true
                map.put(nums[i], map.get(nums[i]) + 1);
            } else { // false
                map.put(nums[i], 1);
            }
        }

        for (int key : map.keySet()) {
            if (map.get(key) > n / 3) {
                System.out.println(key);
            }
        }
    }

    // Question 2 ->
    public static int unique(int arr1[], int arr2[]) {
        HashSet<Integer> set = new HashSet<>();

        for (int i = 0; i < arr1.length; i++) {
            set.add(arr1[i]);
        }

        for (int j = 0; j < arr2.length; j++) {
            set.add(arr2[j]);
        }
        return set.size();
    }

    // Question 3 ->
    public static int interSection(int arr1[], int arr2[]) {
        HashSet<Integer> set = new HashSet<>();
        int count = 0;

        for (int i = 0; i < arr1.length; i++) {
            set.add(arr1[i]);
        }

        for (int j = 0; j < arr2.length; j++) {
            if (set.contains(arr2[j])) {
                count++;
                set.remove(arr2[j]);
            }
        }
        return count;
    }

    // Question 4 -> Find Itinerary from Tickets
    public static String getStart(HashMap<String, String> tick) {
        HashMap<String, String> revMap = new HashMap<>();

        for (String key : tick.keySet()) {
            revMap.put(tick.get(key), key);
        }

        for (String key : tick.keySet()) {
            if (!revMap.containsKey(key)) {
                return key;
            }
        }
        return null;
    }

    public static void main(String[] args) {

        // Question 1 ->
        // int nums[] = { 1, 3, 2, 5, 1, 3, 1, 5, 1 }; // 1
        // majorityElement(nums);

        // Question 2 ->
        // int arr1[] = { 7, 3, 9 };
        // int arr2[] = { 7, 3, 9, 6, 2, 4 };
        // System.out.println(unique(arr1, arr2)); // 6

        // Question 3 ->
        // System.out.println(interSection(arr1, arr2)); // 3

        // Question 4 ->
        // HashMap<String, String> tickets = new HashMap<>();
        // tickets.put("Chennai", "Bengaluru");
        // tickets.put("Mumbai", "Delhi");
        // tickets.put("Goa", "Chennai");
        // tickets.put("Delhi", "Goa");

        // String start = getStart(tickets);

        // while (tickets.containsKey(start)) {
        // System.out.print(start + "->");
        // start = tickets.get(start);
        // }
        // System.out.println(start);

        // Question 5 -> Subarray sum equal to K

        int arr[] = { 10, 2, -2, -20, 10 }; // ans =3
        int K = -10;
        HashMap<Integer, Integer> map = new HashMap<>(); // <sum, freq>

        map.put(0, 1); // empty subaary
        int ans = 0;
        int sum = 0;
        for (int j = 0; j < arr.length; j++) {
            sum += arr[j];

            if (map.containsKey(sum - K)) {
                ans += map.get(sum - K);
            }

            if (map.containsKey(sum)) {
                map.put(sum, map.get(sum) + 1);
            } else {
                map.put(sum, 1);
            }

        }

        System.out.println(ans);
    }

}
