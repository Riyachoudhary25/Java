public class LL {
    Node head;
    private int size;

    LL() {
        this.size = 0;
    }

    class Node {
        String data;
        Node next;

        Node(String data) {
            this.data = data;
            this.next = null;
            size++;
        }
    }

    // add - first , last.
    public void addFirst(String data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void addLAst(String data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node currNode = head;
        while (currNode.next != null) {
            currNode = currNode.next;
        }
        currNode.next = newNode;
    }

    // print
    public void printList() {
        if (head == null) {
            System.out.println("List is empty");
            return;
        }

        Node currNode = head;
        while (currNode != null) {
            System.out.print(currNode.data + " -> ");
            currNode = currNode.next;
        }
        System.out.println("NULL");

    }

    // delete first-->
    public void deleteFirst() {
        if (head == null) {
            System.out.println("The list is empty");
            return;
        }
        size--;
        head = head.next;
    }

    // delete last -->
    public void deleteLast() {
        if (head == null) {
            System.out.println("The list is empty");
            return;
        }
        size--;
        if (head.next == null) {
            head = null;
            return;
        }
        Node secondLast = head;
        Node lastNode = head.next;
        while (lastNode.next != null) {
            lastNode = lastNode.next;
            secondLast = secondLast.next;
        }
        secondLast.next = null;
    }

    // get Size -->
    public int getsize() {
        return size;
    }

    // reverse a linked list (Iterative)
    // Iterative Method
    // Time complexity - O(n)
    // Space complexity - O(1)
    public void reverseList() {
        if (head == null || head.next == null) {
            return;
        }

        Node prevNode = head;
        Node currNode = head.next;
        while (currNode != null) {
            Node nextNode = currNode.next;
            currNode.next = prevNode;
            prevNode = currNode;
            currNode = nextNode;
        }
        head.next = null;
        head = prevNode;
    }

    // Recursive Method
    // Time complexity - O(n)
    // Space complexity - O(1)

    public Node reverseListRecursive(Node head) {
        if (head == null || head.next == null) {
            return head;
        }
        Node newHead = reverseListRecursive(head.next);
        head.next.next = head;
        head.next = null;
        return newHead;
    }

    public static void main(String[] args) {
        LL list = new LL();
        // list.addFirst("a");
        // list.addFirst("is");
        // list.printList();

        // list.addLAst("List");
        // list.printList();

        // list.addFirst("this");
        // list.printList();

        // list.deleteFirst();
        // list.printList();

        // list.deleteLast();
        // list.printList();

        // list.addFirst("This");
        // System.out.println(list.getsize());

        //// reverse a linked list (Iterative) -->
        // list.addLAst("1");
        // list.addLAst("2");
        // list.addLAst("3");
        // list.addLAst("4");
        // list.printList();

        // list.reverseList();
        // list.printList();

        // reverseListRecursive
        list.addLAst("1");
        list.addLAst("2");
        list.addLAst("3");
        list.addLAst("4");
        list.printList();

        list.head = list.reverseListRecursive(list.head);
        list.printList();

    }
}
// ** variables size
// non -continous memory
// insert --> O(1)
// search --> O(n) **

// Head --> first node
// tail --> last node
