// Recursion --> function that call itself.
// ** --> Outer Function take some step and assume inner fuuntion do rest of the work.
public class Recursion1 {
    // Q1--> Print numbers from 5 to 1.
    // public static void printNumb(int n) {
    // if (n == 0) { // base case
    // return;
    // }
    // System.out.println(n); // print
    // printNumb(n - 1); // recursion
    // }

    // Q2. Print numbers from 1 to 5.
    // public static void printNumb(int n) {
    // if (n == 6) {
    // return;
    // }
    // System.out.println(n);
    // printNumb(n + 1);
    // }

    // Q3. Print the sum of first n natural numbers.

    // public static void printSum(int i, int n, int sum) {
    // if (i == n) {
    // sum += i;
    // System.out.println(sum);
    // return;
    // }
    // sum += i;
    // printSum(i + 1, n, sum);
    // }

    // Q4. Print factorial of a number n.
    // public static int calcFactorial(int n) {
    // if (n == 1 || n == 0) {
    // return 1;
    // }
    // int fact_nm1 = calcFactorial(n - 1);
    // int fact_n = n * fact_nm1;
    // return fact_n;
    // }

    // Q5. Print the fibonacci sequence till nth term.
    // public static void printFib(int a, int b, int n) {
    // if (n == 0) {
    // return;
    // }
    // int c = a + b;
    // System.out.println(c);
    // printFib(b, c, n - 1);
    // }

    // Q6. Print x^n (with stack height = n)
    // public static int calcPower(int x, int n) {
    // if (n == 0) {
    // return 1;
    // }
    // if (x == 0) {
    // return 0;
    // }
    // int xPownm1 = calcPower(x, n - 1);
    // int xPown = x * xPownm1;
    // return xPown;
    // }

    // Q7. Print x^n (with stack height = logn)

    public static int printPower(int x, int n) {
        if (n == 0) {
            return 1;
        }
        if (n % 2 == 0) { // Even
            return printPower(x, n / 2) * printPower(x, n / 2);
        } else {
            return x * printPower(x, n / 2) * printPower(x, n / 2);
        }
    }

    public static void main(String[] args) {
        // Q1--> Print numbers from 5 to 1.
        // int n = 5;
        // printNumb(n); // 5

        // Q2. Print numbers from 1 to 5.
        // int n = 1;
        // printNumb(n);

        // Q3. Print the sum of first n natural numbers.
        // printSum(1, 5, 0);

        // Q4. Print factorial of a number n.
        // int n = 5;
        // int ans = calcFactorial(n);
        // System.out.println(ans);

        // Q5. Print the fibonacci sequence till nth term.
        // int a = 0, b = 1;
        // System.out.println(a);
        // System.out.println(b);
        // int n = 7;
        // printFib(a, b, n - 2);

        // Q6. Print x^n (with stack height = n)
        // int x = 2, n = 5;
        // int ans = calcPower(x, n);
        // System.out.println(ans);

        // Q7. Print x^n (with stack height = logn)
        int x = 2, n = 5;
        int output = printPower(x, n);
        System.out.println(output);
    }
}
