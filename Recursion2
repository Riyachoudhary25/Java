// Recursion --> function that call itself.
// ** --> Outer Function take some step and assume inner fuuntion do rest of the work.

import java.util.HashSet;

public class Recursion2 {
    // Q1. Tower of Hanoi :- Transfer n disks from source to destination over 3
    // towers. -->
    // Time Complexity = O(2^n)
    public static void towerOfHanoi(int n, String src, String helper, String dest) {
        if (n == 1) {
            System.out.println("transfer disk " + n + " from " + src + " to " + helper);
            return;
        }
        // transfer top n-1 from src to helper using dest as 'helper'
        towerOfHanoi(n - 1, src, dest, helper);
        // transfer nth from src to dest
        System.out.println("transfer disk " + n + " from " + src + " to " + helper);
        // transfer n-1 from helper to dest using src as 'helper'
        towerOfHanoi(n - 1, helper, src, dest);
    }

    // Q2. Print a string in reverse.
    // Time complexity = O(N)
    public static void printRev(String str, int idx) {
        if (idx == 0) {
            System.out.println(str.charAt(idx));
            return;
        }
        System.out.println(str.charAt(idx));
        printRev(str, idx - 1);
    }

    // Q3. Find the occurrence of the first and last occurrence of an element using
    // recursion.
    // Time complexity = O(N)
    public static int first = -1;
    public static int last = -1;

    public static void findOccurrence(String str, int idx, char element) {
        if (idx == str.length()) {
            System.err.println(first);
            System.out.println(last);
            return;
        }
        char currChar = str.charAt(idx);
        if (currChar == element) {
            if (first == -1) {
                first = idx;
            } else {
                last = idx;
            }
        }
        findOccurrence(str, idx + 1, element);
    }

    // Q4. Check if an array is sorted (strictly increasing). - O(n)
    public static boolean isSorted(int arr[], int idx) {
        if (idx == arr.length - 1) {
            return true;
        }
        // array is sorted till now
        if (arr[idx] < arr[idx + 1]) {
            return isSorted(arr, idx + 1);
        } else {
            return false;
        }
    }

    // Q5. Move all ‘x’ to the end of the string. - O(n)
    public static void moveAllX(String str, int idx, int count, String newString) {
        if (idx == str.length()) {
            for (int i = 0; i < count; i++) {
                newString += 'x';
            }
            System.out.println(newString);
            return;
        }
        char currChar = str.charAt(idx);
        if (currChar == 'x') {
            count++;
            moveAllX(str, idx + 1, count, newString);
        } else {
            newString += currChar; // newString = newString + currChar;
            moveAllX(str, idx + 1, count, newString);
        }
    }

    // Q6. Remove duplicates in a string. O(N)
    public static boolean map[] = new boolean[26];

    public static void removeDuplicates(String str, int idx, String newString) {
        if (idx == str.length()) {
            System.out.println(newString);
            return;
        }
        char currChar = str.charAt(idx);
        if (map[currChar - 'a']) {
            removeDuplicates(str, idx + 1, newString);
        } else {
            newString += currChar;
            map[currChar - 'a'] = true;
            removeDuplicates(str, idx + 1, newString);
        }
    }

    // Q7. Print all the subsequences of a string. O(2^n)
    public static void subSequences(String str, int idx, String newString) {
        if (idx == str.length()) {
            System.out.println(newString);
            return;
        }
        char currChar = str.charAt(idx);
        // choose
        subSequences(str, idx + 1, newString + currChar);
        // don't choose
        subSequences(str, idx + 1, newString);
    }

    // Q8. Print all unique subsequences of a string.
    public static void printSubseq(String str, int idx, String res, HashSet<String> allSubseq) {
        if (idx == str.length()) {
            if (allSubseq.contains(res)) {
                return;
            }
            allSubseq.add(res);
            System.out.println(res);
            return;
        }

        // choose
        printSubseq(str, idx + 1, res + str.charAt(idx), allSubseq);
        // don't choose
        printSubseq(str, idx + 1, res, allSubseq);
    }

    // Q9. Print keypad combination
    // ( 0 -> .;
    // 1 -> abc
    // 2 -> def
    // 3 -> ghi
    // 4 -> jkl
    // 5 -> mno
    // 6 -> pqrs
    // 7 -> tu
    // 8 -> vwx
    // 9 -> yz
    // )
    public static String keypad[] = { ".", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tu", "vwx", "yz" };

    public static void printComb(String str, int idx, String combinatin) {
        if (idx == str.length()) {
            System.out.println(combinatin);
            return;
        }
        char currChar = str.charAt(idx);
        String mapping = keypad[currChar - '0'];
        for (int i = 0; i < mapping.length(); i++) {
            printComb(str, idx + 1, combinatin + mapping.charAt(i));
        }
    }

    public static void main(String[] args) {
        // Q1. Tower of Hanoi - Transfer n disks from source to destination over 3
        // towers.
        // int n = 3;
        // towerOfHanoi(n, "S", "H", "D");

        // Q2. Print a string in reverse.
        // String str = "ABCD";
        // printRev(str, str.length() - 1);

        // Q3. Find the occurrence of the first and last occurrence of an element using
        // recursion.
        // String str = "abaacdaefaah";
        // findOccurrence(str, 0, 'a');

        // Q4. Check if an array is sorted (strictly increasing). - O(n)
        // int arr[] = { 1, 2, 3, 4 };
        // System.out.println(isSorted(arr, 0));

        // Q5. Move all ‘x’ to the end of the string. - O(n)
        // String str = "axbxcxxd";
        // moveAllX(str, 0, 0, " ");

        // Q6. Remove duplicates in a string.
        // String str = "abbccda";
        // removeDuplicates(str, 0, " ");

        // Q7. Print all the subsequences of a string.
        // String str = "ABC";
        // subSequences(str, 0, " ");

        // Q8. Print all unique subsequences of a string.
        // String str = "aaa";
        // HashSet<String> allSubseq = new HashSet<>();
        // printSubseq(str, 0, "", allSubseq);

        // Q9. Print keypad combination.
        String str = "23";
        printComb(str, 0, " ");

    }
}
